rm(x.error, y.error, i)
york_output7.1 <- york(x, y, mult_samples = TRUE)
york_output7.1$coefficients
york_output7.1$goodness_of_fit
plot(york_output7.1)
summary(york_output7.1)
## strong correlation between errors
x.error <- list()
y.error <- list()
x <- list()
y <- list()
set.seed(42)
for (i in 1:10){
x.error[[i]] <-  rnorm(10, sd = 1.5)
y.error[[i]] <-  rnorm(10, sd = 0.05)
x[[i]] <- c(0.1, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4) + x.error[[i]]
y[[i]] <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5) + x.error[[i]] + y.error[[i]]
}
y <- data.frame(y)
colnames(y) <- 1:10
x <- data.frame(x)
colnames(x) <- 1:10
rm(x.error, y.error, i)
york_output7.2 <- york(x, y, mult_samples = TRUE)
york_output7.2$coefficients
york_output7.2$goodness_of_fit
plot(york_output7.2)
## weak correlation between errors
x.error <- list()
y.error <- list()
x <- list()
y <- list()
set.seed(42)
for (i in 1:10){
x.error[[i]] <-  rnorm(10, sd = 0.5)
y.error[[i]] <-  rnorm(10, sd = 0.6)
x[[i]] <- c(0.1, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4) + x.error[[i]]
y[[i]] <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5) + x.error[[i]] * 0.1 + y.error[[i]]
}
y <- data.frame(y)
colnames(y) <- 1:10
x <- data.frame(x)
colnames(x) <- 1:10
rm(x.error, y.error, i)
york_output7.3 <- york(x, y, mult_samples = TRUE)
york_output7.3$coefficients
york_output7.3$goodness_of_fit
plot(york_output7.3)
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
weights_x <- c(1e+3, 1e+3, 5e+2, 8e+2, 2e+2, 8e+1, 6e+1, 2e+1, 1.8, 1)
weights_y <- c(1, 1.8, 4, 8, 20, 20, 70, 70, 1e+2, 5e+2)
## strong correlation between errors
x.error <- list()
y.error <- list()
x <- list()
y <- list()
set.seed(42)
for (i in 1:10){
x.error[[i]] <-  rnorm(10, sd = 1.5)
y.error[[i]] <-  rnorm(10, sd = 0.05)
x[[i]] <- c(0.1, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4) + x.error[[i]]
y[[i]] <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5) + x.error[[i]] + y.error[[i]]
}
y <- data.frame(y)
colnames(y) <- 1:10
x <- data.frame(x)
colnames(x) <- 1:10
rm(x.error, y.error, i)
york_output7.2 <- york(x, y, mult_samples = TRUE)
york_output7.2$coefficients
york_output7.2$goodness_of_fit
## weak correlation between errors
x.error <- list()
y.error <- list()
x <- list()
y <- list()
set.seed(42)
for (i in 1:10){
x.error[[i]] <-  rnorm(10, sd = 0.5)
y.error[[i]] <-  rnorm(10, sd = 0.6)
x[[i]] <- c(0.1, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4) + x.error[[i]]
y[[i]] <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5) + x.error[[i]] * 0.1 + y.error[[i]]
}
y <- data.frame(y)
colnames(y) <- 1:10
x <- data.frame(x)
colnames(x) <- 1:10
rm(x.error, y.error, i)
york_output7.3 <- york(x, y, mult_samples = TRUE)
york_output7.3$coefficients
york_output7.3$goodness_of_fit
plot(york_output7.3)
summary(york_output7.3)
predict(york_output7.3)
summary(york_output7.1)
# 7.
load("/home/main/Uni/Semester2/RProgramming/package/Examples_code/multiple_samples.RData") # York 66
# rewrite input and delete rows with NA values
re_input <- f_rewrite_mult(x, y)
devtools::load_all()
# rewrite input and delete rows with NA values
re_input <- f_rewrite_mult(x, y)
x <- re_input$x
y <- re_input$y
# Define errors, error correlation and weights in multiple sample case
mean_x_i <- apply(x, 1, mean)
mean_y_i <- apply(y, 1, mean)
x_errors <- x - mean_x_i
y_errors <- y - mean_y_i
r_xy_errors <- f_corr_row(x_errors,
y_errors)
sd_x <- f_var_row(x)
sd_y <- f_var_row(y)
weights_x <- 1 / sd_x
weights_y <- 1 / sd_y
var_x <- f_var_row(x)
var_y <- f_var_row(y)
weights_x <- 1 / var_x
weights_y <- 1 / var_y
x_data <- x
y_original <- y
x_data <- x
y_data <- y
x <- as.matrix(stack(data.frame(t(x_data)))[1])
View(x)
View(x_data)
devtools::test()
devtools::check()
load("/home/main/Uni/Semester2/RProgramming/package/Examples_code/original_data.RData") # York 66
weights_x <- weights.x
weights_y <- weights.y
# 1.
help(york)
# 2.
york_output2 <- york(x, y, weights_x = weights_x, weights_y = weights_y, r_xy_errors = 0)
class(york_output2)
york_output2$coefficients
york_output2$x_residuals
york_output2$y_residuals
york_output2$fitted_y
york_output2$n_iterations
york_output2$slope_per_iteration
york_output2$reduced_chisq
york_output2$coefficients; york_output2$ols_summary$coefficients_ols
random_correlation <- rnorm(10, sd = 0.1)
york_output2.1 <- york(x, y, weights_x = weights_x, weights_y = weights_y, r_xy_errors = random_correlation)
york_output2.1$data
york_output2.1$coefficients
# 3.
x[2:3] <- NA # Show NA case
y[5] <- NA
View(x)
york_output3 <- york(x, y, weights_x = weights_x, weights_y = weights_y, r_xy_errors = random_correlation)
york_output3$data
no_convergence <- york(x, y, weights_x = weights_x, weights_y = weights_y, r_xy_errors = random_correlation,
max_iterations = 2)
plot(york_output2)
to_predict <- c(2,3,4,3.6) # vector or dataframe
predict(york_output2, newdata = to_predict)
predict(york_output3, new = 2)
predict(york_output2)
# 7.
load("/home/main/Uni/Semester2/RProgramming/package/Examples_code/multiple_samples.RData") # York 66
york_output7 <- york(x, y, mult_samples = TRUE)
york_output7$coefficients
plot(york_output7)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
package?York
?York
?lm
?MASS
library(MASS)
?MASS
package?MASS
devtools::document()
?York
devtools::document()
?York
devtools::document()
?York
devtools::document()
?York
brazil_income <- read.csv("~/Uni/Semester2/GeneralisedLM/Lecture/data/brazil_income.raw", sep="")
View(brazil_income)
library(York)
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
weights_x <- c(1e+3, 1e+3, 5e+2, 8e+2, 2e+2, 8e+1, 6e+1, 2e+1, 1.8, 1)
weights_y <- c(1, 1.8, 4, 8, 20, 20, 70, 70, 1e+2, 5e+2)
# 2.
york_output2 <- york(x, y, weights_x = weights_x, weights_y = weights_y, r_xy_errors = 0)
devtools::load_all()
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
weights_x <- c(1e+3, 1e+3, 5e+2, 8e+2, 2e+2, 8e+1, 6e+1, 2e+1, 1.8, 1)
weights_y <- c(1, 1.8, 4, 8, 20, 20, 70, 70, 1e+2, 5e+2)
# 2.
york_output2 <- york(x, y, weights_x = weights_x, weights_y = weights_y, r_xy_errors = 0)
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
wx <- c(1e+3, 1e+3, 5e+2, 8e+2, 2e+2, 8e+1, 6e+1, 2e+1, 1.8, 1)
wy <- c(1, 1.8, 4, 8, 20, 20, 70, 70, 1e+2, 5e+2)
fit <- york(x, y, wx, wy, r_xy_errors = 0)
summary(fit)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
# data
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
wx <- c(1e+3, 1e+3, 5e+2, 8e+2, 2e+2, 8e+1, 6e+1, 2e+1, 1.8, 1)
wy <- c(1, 1.8, 4, 8, 20, 20, 70, 70, 1e+2, 5e+2)
# fit model
fit <- york(x, y, wx, wy, r_xy_errors = 0)
summary(fit)
devtools::test()
devtools::load_all()
?York
devtools::load_all()
?York
devtools::document()
?york
?York
?lm
?glm
library(gamlss)
?gamlss
# data
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
wx <- c(1e+3, 1e+3, 5e+2, 8e+2, 2e+2, 8e+1, 6e+1, 2e+1, 1.8, 1)
wy <- c(1, 1.8, 4, 8, 20, 20, 70, 70, 1e+2, 5e+2)
# fit model
fit <- york(x, y, wx, wy, r_xy_errors = 0)
summary(fit)
summary(fit)
# predict
newdata <- c(5, 7.5, 8)
predict(fit, newdata)
fit_orthogonal <- york(x, y, weights_x =  1, weights_y =  1, r_xy_errors = 0)
fit_orthogonal$coefficients
fit_ols <- york(x, y, weights_x =  1e+5, weights_y =  1, r_xy_errors = 0)
fit_ols$coefficients
# special cases of York's regression
fit_orthogonal <- york(x, y, weights_x =  1, weights_y =  1, r_xy_errors = 0)
fit_orthogonal$coefficients
fit_ols <- york(x, y, weights_x =  1e+5, weights_y =  1, r_xy_errors = 0)
fit_ols$coefficients
# data
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
wx <- c(1e+3, 1e+3, 5e+2, 8e+2, 2e+2, 8e+1, 6e+1, 2e+1, 1.8, 1)
wy <- c(1, 1.8, 4, 8, 20, 20, 70, 70, 1e+2, 5e+2)
# fit model
fit <- york(x, y, wx, wy, r_xy_errors = 0)
summary(fit)
# special cases of York's regression
fit_orthogonal <- york(x, y, weights_x =  1, weights_y =  1, r_xy_errors = 0)
fit_ols <- york(x, y, weights_x =  1e+5, weights_y =  1, r_xy_errors = 0)
fit_orthogonal$coefficients[2, 1]
fit_ols$coefficients[2, 1]
## small measurment error
x.error <- list()
y.error <- list()
x <- list()
y <- list()
set.seed(42)
for (i in 1:10){
x.error[[i]] <-  rnorm(10, sd = 0.1)
y.error[[i]] <-  rnorm(10, sd = 0.05)
x[[i]] <- c(0.1, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4) + x.error[[i]]
y[[i]] <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5) + x.error[[i]] * 0.3 + y.error[[i]]
}
y <- data.frame(y)
x <- data.frame(x)
fit_mult <- york(x, y, mult_samples = TRUE)
fit_mult$data
y <- data.frame(y)
colnames(y) <- 1:10
x <- data.frame(x)
colnames(x) <- 1:10
# fit model
fit_mult <- york(x, y, mult_samples = TRUE)
fit_mult$data
devtools::load_all()
## generate data with small measurment error and correlation between errors
x.error <- list()
y.error <- list()
x <- list()
y <- list()
set.seed(42)
for (i in 1:10){
x.error[[i]] <-  rnorm(10, sd = 0.1)
y.error[[i]] <-  rnorm(10, sd = 0.05)
x[[i]] <- c(0.1, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4) + x.error[[i]]
y[[i]] <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5) + x.error[[i]] * 0.3 + y.error[[i]]
}
y <- data.frame(y)
colnames(y) <- 1:10
x <- data.frame(x)
colnames(x) <- 1:10
# fit model
fit_mult <- york(x, y, mult_samples = TRUE)
fit_mult$data
fit_mult$weights
fit_mult$data$error_correlation
## generate data with small measurment error and correlation between errors
x.error <- list()
y.error <- list()
x <- list()
y <- list()
set.seed(42)
for (i in 1:10){
x.error[[i]] <-  rnorm(10, sd = 0.1)
y.error[[i]] <-  rnorm(10, sd = 0.05)
x[[i]] <- c(0.1, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4) + x.error[[i]]
y[[i]] <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5) + x.error[[i]] * 0.3 + y.error[[i]]
}
y <- data.frame(y)
colnames(y) <- 1:10
x <- data.frame(x)
colnames(x) <- 1:10
# fit model
fit_mult <- york(x, y, mult_samples = TRUE)
fit_mult$weights
fit_mult$data$error_correlation
## generate data with small measurment error and correlation between errors
x.error <- list()
y.error <- list()
x <- list()
y <- list()
set.seed(42)
for (i in 1:10){
x.error[[i]] <-  rnorm(10, sd = 0.1)
y.error[[i]] <-  rnorm(10, sd = 0.05)
x[[i]] <- c(0.1, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4) + x.error[[i]]
y[[i]] <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5) + x.error[[i]]
* 0.3 + y.error[[i]]
}
for (i in 1:10){
x.error[[i]] <-  rnorm(10, sd = 0.1)
y.error[[i]] <-  rnorm(10, sd = 0.05)
x[[i]] <- c(0.1, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4) + x.error[[i]]
y[[i]] <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5) + x.error[[i]]
* 0.3 + y.error[[i]]
}
## generate data with small measurment error and correlated errors
# use old data x and y as mean
x_mult_error <- list()
y_mult_error <- list()
x_mult <- list()
y_mult <- list()
# data
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
## generate data with small measurment error and correlated errors
# use old data x and y as mean
x_mult_error <- list()
y_mult_error <- list()
x_mult <- list()
y_mult <- list()
set.seed(42)
for (i in 1:10){
x_mult_error[[i]] <-  rnorm(10, sd = 0.1)
y_mult_error[[i]] <-  rnorm(10, sd = 0.05)
x_mult[[i]] <- x + x_mult_error[[i]]
y_mult[[i]] <- y + x_mult_error[[i]] * 0.3 + y_mult_error[[i]]
}
y_mult <- data.frame(y_mult)
colnames(y_mult) <- 1:10
x <- data.frame(x_mult)
colnames(x_mult) <- 1:10
# data
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
## generate data with small measurment error and correlated errors
# use old data x and y as mean
x_mult_error <- list()
y_mult_error <- list()
x_mult <- list()
y_mult <- list()
set.seed(42)
for (i in 1:10){
x_mult_error[[i]] <-  rnorm(10, sd = 0.1)
y_mult_error[[i]] <-  rnorm(10, sd = 0.05)
x_mult[[i]] <- x + x_mult_error[[i]]
y_mult[[i]] <- y + x_mult_error[[i]] * 0.3 + y_mult_error[[i]]
}
y_mult <- data.frame(y_mult)
colnames(y_mult) <- 1:10
x_mult <- data.frame(x_mult)
colnames(x_mult) <- 1:10
# fit model
fit_mult <- york(x_mult, y_mult, mult_samples = TRUE)
fit_mult$weights
fit_mult$data$error_correlation
# data
x <- c(0.0, 0.9, 1.8, 2.6, 3.3, 4.4, 5.2, 6.1, 6.5, 7.4)
y <- c(5.9, 5.4, 4.4, 4.6, 3.5, 3.7, 2.8, 2.8, 2.4, 1.5)
## generate data with small measurment error and correlated errors
# use old data x and y as mean
x_mult_error <- list()
y_mult_error <- list()
x_mult <- list()
y_mult <- list()
set.seed(42)
for (i in 1:10){
x_mult_error[[i]] <-  rnorm(10, sd = 0.1)
y_mult_error[[i]] <-  rnorm(10, sd = 0.05)
x_mult[[i]] <- x + x_mult_error[[i]]
y_mult[[i]] <- y + x_mult_error[[i]] * 0.3 + y_mult_error[[i]]
}
y_mult <- data.frame(y_mult)
colnames(y_mult) <- 1:10
x_mult <- data.frame(x_mult)
colnames(x_mult) <- 1:10
# fit model
fit_mult <- york(x_mult, y_mult, mult_samples = TRUE)
devtools::load_all()
# fit model
fit_mult <- york(x_mult, y_mult, mult_samples = TRUE)
fit_mult$weights
fit_mult$data$error_correlation
# orediction
predict(fit_mult)
wx <- c(1e+3, 1e+3, 5e+2, 8e+2, 2e+2, 8e+1, 6e+1, 2e+1, 1.8, 1)
wy <- c(1, 1.8, 4, 8, 20, 20, 70, 70, 1e+2, 5e+2)
wx <- c(1e+3, 1e+3, 5e+2, 8e+2, 2e+2, 8e+1, 6e+1, 2e+1, 1.8, 1)
wy <- c(1, 1.8, 4, 8, 20, 20, 70, 70, 1e+2, 5e+2)
york(x, y, wx, wy, r_xy_errors = 0, approx_solution = TRUE)$coefficient[2, 1]
devtools::test()
devtools::check()
devtools::document()
devtools::check()
devtools::test()
library(ggplot2)
devtools::test()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::test()
devtools::check()
devtools::load_all()
devtools::check()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
library(devtools)
test()
document()
check()
load_all()
check()
library(yorkregression)
check()
check()
load
library(devtools)
load_all()
test()
document()
check()
load_all()
check()
load_all()
check()
check()
check()
load_all()
check()
check()
library(devtools)
load_all()
check()
load_all()
check()
load_all()
check()
check()
check()
check()
check()
use_build_ignore("York.Rproj")
load_all()
check()
use_build_ignore("yorkregression.Rproj")
use_build_ignore("York.Rproj")
use_build_ignore("yorkregression.Rproj")
check()
build()
build()
check()
check()
library(devtools)
install()
test()
library(yorkregression)
check()
