### york in Least Squares Fitting Of A Straight Line With Correlated Errors ###
#setwd()
load("multiple_samples.RData")
getwd()
setwd("/home/main/Uni/Semester2/RProgramming/package/York/R")
### york in Least Squares Fitting Of A Straight Line With Correlated Errors ###
#setwd()
load("multiple_samples.RData")
omega.x[1] <- 1 / var(x[1, ])
omega.y <- rep(0,length(x))
omega.x[1] <- 1 / var(x[1, ])
Weight <- rep(0,length(x))
omega.x <- rep(0,length(x))
omega.x[1] <- 1 / var(x[1, ])
error.correlation <- rep(0,length(x))
slope.old <- slope
x.bar <- 0
#initial value of b is OLS
lm.OLS <- list()
slope <- NULL
for (i in 1:5){
lm.OLS[[i]] <- lm(y[, i]~x[, i])
slope[i] <- as.numeric(lm.OLS[[i]][[1]][2])
}
slope <- mean(slope)
slope.diff <- 10
count <- 0
slope.per.iteration <- NULL
slope.old <- slope
x.bar <- 0
y.bar <- 0
W.sum <- 0
alpha <- rep(0,length(x))
Weight <- rep(0,length(x))
omega.x <- rep(0,length(x))
omega.y <- rep(0,length(x))
error.correlation <- rep(0,length(x))
for (i in 1:length(x)) {
omega.x[i] <- 1 / var(x[i, ])
omega.y[i] <- 1 / var(y[i, ])
alpha[i] <- sqrt(omega.x[i] * omega.y[i])
Weight[i] <- alpha[i]^2 / (slope^2 * omega.y[i] + omega.x[i] - 2 * slope * error.correlation[i] * alpha[i])
x.bar <- x.bar + Weight[i] * x[i, ]
y.bar <- y.bar + Weight[i] * y[i, ]
W.sum <- W.sum + Weight[i]
}
define.weights <- function(x, y, factor.x = 0.02, factor.y = 0.003){
weights.x <- 1 / (x * factor.x)^2
weights.y <- 1 / (y * factor.y)^2
}
## Input from Table I and Table II in york 1966
#setwd()
load("original_data.RData")
define.weights <- function(x, y, factor.x = 0.02, factor.y = 0.003){
weights.x <- 1 / (x * factor.x)^2
weights.y <- 1 / (y * factor.y)^2
}
define.weights(x, y)
define.weights <- function(x, y, factor.x = 0.02, factor.y = 0.003){
weights.x <- 1 / (x * factor.x)^2
weights.y <- 1 / (y * factor.y)^2
return(data.frame(weights.x, weights.y))
}
weights <- define.weights(x, y)
### york in Least Squares Fitting Of A Straight Line With Correlated Errors ###
#setwd()
load("multiple_samples.RData")
#initial value of b is OLS
lm.OLS <- list()
slope <- NULL
for (i in 1:5){
lm.OLS[[i]] <- lm(y[, i]~x[, i])
slope[i] <- as.numeric(lm.OLS[[i]][[1]][2])
}
slope <- mean(slope)
slope.diff <- 10
count <- 0
slope.per.iteration <- NULL
slope.old <- slope
x.bar <- 0
y.bar <- 0
length(x)
length(x[, 1]
)
nrow(x)
alpha <- rep(0,nrow(x))
Weight <- rep(0,nrow(x))
omega.x <- rep(0,nrow(x))
omega.y <- rep(0,nrow(x))
error.correlation <- rep(0,nrow(x))
for (i in 1:nrow(x)) {
omega.x[i] <- 1 / var(x[i, ])
omega.y[i] <- 1 / var(y[i, ])
alpha[i] <- sqrt(omega.x[i] * omega.y[i])
Weight[i] <- alpha[i]^2 / (slope^2 * omega.y[i] + omega.x[i] - 2 * slope * error.correlation[i] * alpha[i])
x.bar <- x.bar + Weight[i] * x[i, ]
y.bar <- y.bar + Weight[i] * y[i, ]
W.sum <- W.sum + Weight[i]
}
